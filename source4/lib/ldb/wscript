#!/usr/bin/env python

APPNAME = 'ldb'
VERSION = '0.9.13'

blddir = 'bin'

import sys, os

# find the buildtools directory
srcdir = '.'
while not os.path.exists(srcdir+'/buildtools') and len(srcdir.split('/')) < 5:
    srcdir = '../' + srcdir
sys.path.insert(0, srcdir + '/buildtools/wafsamba')

import wafsamba, samba_dist

samba_dist.DIST_DIRS('''source4/lib/ldb:. lib/replace:lib/replace lib/talloc:lib/talloc
                        lib/tdb:lib/tdb lib/tevent:lib/tevent lib/popt:lib/popt
                        buildtools:buildtools''')


def set_options(opt):
    opt.BUILTIN_DEFAULT('replace')
    opt.BUNDLED_EXTENSION_DEFAULT('ldb', noextension='ldb')
    opt.RECURSE('lib/tdb')
    opt.RECURSE('lib/tevent')

def configure(conf):
    conf.RECURSE('lib/tdb')
    conf.RECURSE('lib/tevent')
    conf.RECURSE('lib/popt')

    # where does the default LIBDIR end up? in conf.env somewhere?
    #
    conf.CONFIG_PATH('LDB_MODULESDIR', conf.SUBST_ENV_VAR('MODULESDIR') + '/ldb')

    s4_build = getattr(conf.env, '_SAMBA_BUILD_', 0) == 4

    conf.env.standalone_ldb = conf.IN_LAUNCH_DIR()

    if not conf.env.standalone_ldb:
        if conf.CHECK_BUNDLED_SYSTEM('ldb', minversion=VERSION,
                                     onlyif='talloc tdb tevent',
                                     implied_deps='replace talloc tdb tevent'):
            conf.define('USING_SYSTEM_LDB', 1)

    if conf.env.standalone_ldb:
        conf.CHECK_XSLTPROC_MANPAGES()

        # we need this for the ldap backend
        if conf.CHECK_FUNCS_IN('ber_flush ldap_open ldap_initialize', 'lber ldap', headers='lber.h ldap.h'):
            conf.env.ENABLE_LDAP_BACKEND = True

    conf.DEFINE('HAVE_CONFIG_H', 1, add_to_cflags=True)

    conf.SAMBA_CONFIG_H()

def build(bld):
    bld.RECURSE('lib/tdb')
    bld.RECURSE('lib/tevent')
    bld.RECURSE('lib/popt')

    # in Samba4 we build some extra modules, and add extra
    # capabilities to the ldb cmdline tools
    s4_build = getattr(bld.env, '_SAMBA_BUILD_', 0) == 4

    LDB_MAP_SRC = bld.SUBDIR('ldb_map',
                             'ldb_map.c ldb_map_inbound.c ldb_map_outbound.c')

    COMMON_SRC = bld.SUBDIR('common',
                            '''ldb.c ldb_ldif.c ldb_parse.c ldb_msg.c ldb_utf8.c
                            ldb_debug.c ldb_dn.c ldb_match.c ldb_modules.c ldb_options.c
                            ldb_attributes.c attrib_handlers.c ldb_controls.c qsort.c''')

    if s4_build:
        builtin_ildap = not bld.CONFIG_SET('USING_SYSTEM_LDB')
        # this is only in the s4 build
        bld.SAMBA_MODULE('ldb_ildap', 'ldb_ildap/ldb_ildap.c',
                         init_function='LDB_BACKEND(ldapi),LDB_BACKEND(ldaps),LDB_BACKEND(ldap)',
                         deps='talloc LIBCLI_LDAP CREDENTIALS',
                         internal_module=builtin_ildap,
                         subsystem='ldb')
    else:
        builtin_ildap = False
        # this is not included in the s4 build
        bld.SAMBA_MODULE('ldb_ldap', 'ldb_ldap/ldb_ldap.c',
                         init_function='LDB_BACKEND(ldapi),LDB_BACKEND(ldaps),LDB_BACKEND(ldap)',
                         deps='talloc lber ldap',
                         enabled=bld.env.ENABLE_LDAP_BACKEND,
                         subsystem='ldb')

    # we're not currently linking against the ldap libs, but ldb.pc.in
    # has @LDAP_LIBS@
    bld.env.LDAP_LIBS = ''

    if not 'PACKAGE_VERSION' in bld.env:
        bld.env.PACKAGE_VERSION = VERSION
        bld.env.PKGCONFIGDIR = '${LIBDIR}/pkgconfig'

    if builtin_ildap:
        abi_file = 'ABI/ldb-ildap-%s.sigs' % VERSION
    else:
        abi_file = 'ABI/ldb-%s.sigs' % VERSION

    bld.SAMBA_SUBSYSTEM('pyldb_util', deps='ldb',
            source='pyldb_util.c', needs_python=True)

    if not bld.CONFIG_SET('USING_SYSTEM_LDB'):
        modules_dir = bld.EXPAND_VARIABLES('${LDB_MODULESDIR}')
        if bld.env.standalone_ldb:
            bld.SAMBA_LIBRARY('ldb',
                              COMMON_SRC + ' ' + LDB_MAP_SRC,
                              deps='tevent',
                              includes='include',
                              public_headers='include/ldb.h include/ldb_errors.h '\
                                  'include/ldb_module.h include/ldb_handlers.h',
                              pc_files='ldb.pc',
                              cflags='-DLDB_MODULESDIR=\"%s\"' % modules_dir,
                              abi_file=abi_file,
                              abi_match='!ldb_*module_ops !ldb_*backend_ops ldb_*',
                              vnum=VERSION, manpages='man/ldb.3',
                              is_bundled=not bld.env.standalone_ldb)
        else:
            bld.SAMBA_LIBRARY('ldb',
                              COMMON_SRC + ' ' + LDB_MAP_SRC,
                              deps='tevent',
                              includes='include',
                              public_headers='include/ldb.h include/ldb_errors.h '\
                                  'include/ldb_module.h include/ldb_handlers.h',
                              pc_files='ldb.pc',
                              cflags='-DLDB_MODULESDIR=\"%s\"' % modules_dir,
                              vnum=VERSION, manpages='man/ldb.3',
                              is_bundled=not bld.env.standalone_ldb)

        bld.SAMBA_PYTHON('pyldb', 'pyldb.c',
                         deps='ldb pyldb_util',
                         realname='ldb.so')

        bld.SAMBA_MODULE('ldb_paged_results',
                         'modules/paged_results.c',
                         init_function='LDB_MODULE(paged_results)',
                         subsystem='ldb')

        bld.SAMBA_MODULE('ldb_asq',
                         'modules/asq.c',
                         init_function='LDB_MODULE(asq)',
                         subsystem='ldb')

        bld.SAMBA_MODULE('ldb_server_sort',
                         'modules/sort.c',
                         init_function='LDB_MODULE(server_sort)',
                         subsystem='ldb')

        bld.SAMBA_MODULE('ldb_paged_searches',
                         'modules/paged_searches.c',
                         init_function='LDB_MODULE(paged_searches)',
                         enabled = s4_build,
                         subsystem='ldb')

        bld.SAMBA_MODULE('ldb_rdn_name',
                         'modules/rdn_name.c',
                         init_function='LDB_MODULE(rdn_name)',
                         subsystem='ldb')

        bld.SAMBA_MODULE('ldb_sample',
                         'tests/sample_module.c',
                         init_function='LDB_MODULE(sample)',
                         subsystem='ldb')

        bld.SAMBA_MODULE('ldb_skel',
                         'modules/skel.c',
                         init_function='LDB_MODULE(skel)',
                         subsystem='ldb')

        bld.SAMBA_MODULE('ldb_sqlite3',
                         'sqlite3/ldb_sqlite3.c',
                         init_function='LDB_BACKEND(sqlite3)',
                         enabled=False,
                         subsystem='ldb')

        bld.SAMBA_MODULE('ldb_tdb',
                         bld.SUBDIR('ldb_tdb',
                                    '''ldb_tdb.c ldb_pack.c ldb_search.c ldb_index.c
                                    ldb_cache.c ldb_tdb_wrap.c'''),
                         init_function='LDB_BACKEND(tdb)',
                         deps='tdb',
                         subsystem='ldb')

    if s4_build:
        extra_cmdline_deps = ' LDBSAMBA POPT_SAMBA POPT_CREDENTIALS ' \
                'LIBCMDLINE_CREDENTIALS gensec'
    else:
        extra_cmdline_deps = ''

    bld.SAMBA_SUBSYSTEM('LIBLDB_CMDLINE',
                        'tools/ldbutil.c tools/cmdline.c',
                        'ldb dl popt' + extra_cmdline_deps)

    LDB_TOOLS='ldbadd ldbsearch ldbdel ldbmodify ldbedit ldbrename'
    for t in LDB_TOOLS.split():
        bld.SAMBA_BINARY(t, 'tools/%s.c' % t, deps='LIBLDB_CMDLINE',
                         manpages='man/%s.1' % t)

    # ldbtest doesn't get installed
    bld.SAMBA_BINARY('ldbtest', 'tools/ldbtest.c', deps='LIBLDB_CMDLINE',
                     install=False)


def test(ctx):
    '''run ldb testsuite'''
    import Utils
    cmd = 'tests/test-tdb.sh'
    os.system(cmd)

def dist():
    '''makes a tarball for distribution'''
    samba_dist.dist()
