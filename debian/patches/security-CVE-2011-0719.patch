Goal: Fix denial of service - memory corruption

Fixes: Upstream security fix. CVE-2011-0719

Status wrt upstream: Fixed in 3.5.7

Author: Samba Team <security@samba.org>

Index: lenny/source/client/client.c
===================================================================
--- lenny.orig/source/client/client.c
+++ lenny/source/client/client.c
@@ -4362,8 +4362,10 @@
 
  again:
 
-	if (cli->fd == -1)
+	if (cli->fd < 0 || cli->fd >= FD_SETSIZE) {
+		errno = EBADF;
 		return;
+	}
 
 	FD_ZERO(&fds);
 	FD_SET(cli->fd,&fds);
Index: lenny/source/client/dnsbrowse.c
===================================================================
--- lenny.orig/source/client/dnsbrowse.c
+++ lenny/source/client/dnsbrowse.c
@@ -81,6 +81,11 @@
 			TALLOC_FREE(fdset);
 		}
 
+		if (mdnsfd < 0 || mdnsfd >= FD_SETSIZE) {
+			errno = EBADF;
+			break;
+		}
+
 		fdsetsz = howmany(mdnsfd + 1, NFDBITS) * sizeof(fd_mask);
 		fdset = TALLOC_ZERO(ctx, fdsetsz);
 		FD_SET(mdnsfd, fdset);
@@ -183,6 +188,13 @@
 
 		fdsetsz = howmany(mdnsfd + 1, NFDBITS) * sizeof(fd_mask);
 		fdset = TALLOC_ZERO(ctx, fdsetsz);
+
+		if (mdnsfd < 0 || mdnsfd >= FD_SETSIZE) {
+			errno = EBADF;
+			TALLOC_FREE(ctx);
+			return 1;
+		}
+
 		FD_SET(mdnsfd, fdset);
 
 		tv.tv_sec = 1;
Index: lenny/source/lib/events.c
===================================================================
--- lenny.orig/source/lib/events.c
+++ lenny/source/lib/events.c
@@ -148,6 +148,11 @@
 {
 	struct fd_event *fde;
 
+	if (fd < 0 || fd >= FD_SETSIZE) {
+		errno = EBADF;
+		return NULL;
+	}
+
 	if (!(fde = TALLOC_P(mem_ctx, struct fd_event))) {
 		return NULL;
 	}
@@ -198,6 +203,14 @@
 	bool ret = False;
 
 	for (fde = event_ctx->fd_events; fde; fde = fde->next) {
+		if (fde->fd < 0 || fde->fd >= FD_SETSIZE) {
+			/* We ignore here, as it shouldn't be
+			   possible to add an invalid fde->fd
+			   but we don't want FD_SET to see an
+			   invalid fd. */
+			continue;
+		}
+
 		if (fde->flags & EVENT_FD_READ) {
 			FD_SET(fde->fd, read_fds);
 			ret = True;
Index: lenny/source/lib/packet.c
===================================================================
--- lenny.orig/source/lib/packet.c
+++ lenny/source/lib/packet.c
@@ -106,6 +106,11 @@
 	int res;
 	fd_set r_fds;
 
+	if (ctx->fd < 0 || ctx->fd >= FD_SETSIZE) {
+		errno = EBADF;
+		return map_nt_error_from_unix(errno);
+	}
+
 	FD_ZERO(&r_fds);
 	FD_SET(ctx->fd, &r_fds);
 
Index: lenny/source/lib/readline.c
===================================================================
--- lenny.orig/source/lib/readline.c
+++ lenny/source/lib/readline.c
@@ -73,6 +73,11 @@
 		timeout.tv_sec = 5;
 		timeout.tv_usec = 0;
 
+		if (fd < 0 || fd >= FD_SETSIZE) {
+			errno = EBADF;
+			break;
+		}
+
 		FD_ZERO(&fds);
 		FD_SET(fd,&fds);
 
Index: lenny/source/lib/select.c
===================================================================
--- lenny.orig/source/lib/select.c
+++ lenny/source/lib/select.c
@@ -61,6 +61,11 @@
 		if (pipe(select_pipe) == -1)
 			smb_panic("Could not create select pipe");
 
+		if (select_pipe[0] < 0 || select_pipe[0] >= FD_SETSIZE) {
+			errno = EBADF;
+			return -1;
+		}
+
 		/*
 		 * These next two lines seem to fix a bug with the Linux
 		 * 2.0.x kernel (and probably other UNIXes as well) where
Index: lenny/source/lib/util_sock.c
===================================================================
--- lenny.orig/source/lib/util_sock.c
+++ lenny/source/lib/util_sock.c
@@ -960,6 +960,11 @@
 	timeout.tv_usec = (long)(1000 * (time_out % 1000));
 
 	for (nread=0; nread < mincnt; ) {
+		if (fd < 0 || fd >= FD_SETSIZE) {
+			errno = EBADF;
+			return map_nt_error_from_unix(EBADF);
+		}
+
 		FD_ZERO(&fds);
 		FD_SET(fd,&fds);
 
@@ -1492,7 +1497,7 @@
 
 	for (i=0; i<num_addrs; i++) {
 		sockets[i] = socket(addrs[i].ss_family, SOCK_STREAM, 0);
-		if (sockets[i] < 0)
+		if (sockets[i] < 0 || sockets[i] >= FD_SETSIZE)
 			goto done;
 		set_blocking(sockets[i], false);
 	}
@@ -1541,8 +1546,10 @@
 	FD_ZERO(&r_fds);
 
 	for (i=0; i<num_addrs; i++) {
-		if (sockets[i] == -1)
+		if (sockets[i] < 0 || sockets[i] >= FD_SETSIZE) {
+			/* This cannot happen - ignore if so. */
 			continue;
+		}
 		FD_SET(sockets[i], &wr_fds);
 		FD_SET(sockets[i], &r_fds);
 		if (sockets[i]>maxfd)
Index: lenny/source/libaddns/dnssock.c
===================================================================
--- lenny.orig/source/libaddns/dnssock.c
+++ lenny/source/libaddns/dnssock.c
@@ -218,7 +218,11 @@
 	while (total < len) {
 		ssize_t ret;
 		int fd_ready;
-		
+
+		if (fd < 0 || fd >= FD_SETSIZE) {
+			return ERROR_DNS_SOCKET_ERROR;
+		}
+
 		FD_ZERO( &rfds );
 		FD_SET( fd, &rfds );
 
Index: lenny/source/libsmb/nmblib.c
===================================================================
--- lenny.orig/source/libsmb/nmblib.c
+++ lenny/source/libsmb/nmblib.c
@@ -1097,6 +1097,11 @@
 	struct timeval timeout;
 	int ret;
 
+	if (fd < 0 || fd >= FD_SETSIZE) {
+		errno = EBADF;
+		return NULL;
+	}
+
 	FD_ZERO(&fds);
 	FD_SET(fd,&fds);
 	timeout.tv_sec = t/1000;
Index: lenny/source/nmbd/nmbd_packets.c
===================================================================
--- lenny.orig/source/nmbd/nmbd_packets.c
+++ lenny/source/nmbd/nmbd_packets.c
@@ -1685,7 +1685,7 @@
 	for (subrec = FIRST_SUBNET; subrec; subrec = NEXT_SUBNET_EXCLUDING_UNICAST(subrec))
 		count++;
 
-	if((count*2) + 2 > FD_SETSIZE) {
+	if((count*2) + 2 >= FD_SETSIZE) {
 		DEBUG(0,("create_listen_fdset: Too many file descriptors needed (%d). We can \
 only use %d.\n", (count*2) + 2, FD_SETSIZE));
 		SAFE_FREE(pset);
@@ -1701,24 +1701,44 @@
 	FD_ZERO(pset);
 
 	/* Add in the broadcast socket on 137. */
+	if (ClientNMB < 0 || ClientNMB >= FD_SETSIZE) {
+		errno = EBADF;
+		SAFE_FREE(pset);
+		return True;
+	}
+
 	FD_SET(ClientNMB,pset);
 	sock_array[num++] = ClientNMB;
 	*maxfd = MAX( *maxfd, ClientNMB);
 
 	/* Add in the 137 sockets on all the interfaces. */
 	for (subrec = FIRST_SUBNET; subrec; subrec = NEXT_SUBNET_EXCLUDING_UNICAST(subrec)) {
+		if (subrec->nmb_sock < 0 || subrec->nmb_sock >= FD_SETSIZE) {
+			/* We have to ignore sockets outside FD_SETSIZE. */
+			continue;
+		}
 		FD_SET(subrec->nmb_sock,pset);
 		sock_array[num++] = subrec->nmb_sock;
 		*maxfd = MAX( *maxfd, subrec->nmb_sock);
 	}
 
 	/* Add in the broadcast socket on 138. */
+	if (ClientDGRAM < 0 || ClientDGRAM >= FD_SETSIZE) {
+		errno = EBADF;
+		SAFE_FREE(pset);
+		return True;
+	}
+
 	FD_SET(ClientDGRAM,pset);
 	sock_array[num++] = ClientDGRAM;
 	*maxfd = MAX( *maxfd, ClientDGRAM);
 
 	/* Add in the 138 sockets on all the interfaces. */
 	for (subrec = FIRST_SUBNET; subrec; subrec = NEXT_SUBNET_EXCLUDING_UNICAST(subrec)) {
+		if (subrec->dgram_sock < 0 || subrec->dgram_sock >= FD_SETSIZE) {
+			/* We have to ignore sockets outside FD_SETSIZE. */
+			continue;
+		}
 		FD_SET(subrec->dgram_sock,pset);
 		sock_array[num++] = subrec->dgram_sock;
 		*maxfd = MAX( *maxfd, subrec->dgram_sock);
@@ -1769,7 +1789,7 @@
 
 #ifndef SYNC_DNS
 	dns_fd = asyncdns_fd();
-	if (dns_fd != -1) {
+	if (dns_fd >= 0 && dns_fd < FD_SETSIZE) {
 		FD_SET(dns_fd, &r_fds);
 		maxfd = MAX( maxfd, dns_fd);
 	}
Index: lenny/source/nsswitch/wb_common.c
===================================================================
--- lenny.orig/source/nsswitch/wb_common.c
+++ lenny/source/nsswitch/wb_common.c
@@ -240,6 +240,12 @@
 
 		switch (errno) {
 			case EINPROGRESS:
+
+				if (fd < 0 || fd >= FD_SETSIZE) {
+					errno = EBADF;
+					goto error_out;
+				}
+
 				FD_ZERO(&w_fds);
 				FD_SET(fd, &w_fds);
 				tv.tv_sec = CONNECT_TIMEOUT - wait_time;
@@ -383,7 +389,13 @@
 	while(nwritten < count) {
 		struct timeval tv;
 		fd_set r_fds;
-		
+
+		if (winbindd_fd < 0 || winbindd_fd >= FD_SETSIZE) {
+			errno = EBADF;
+			winbind_close_sock();
+			return -1;
+		}
+
 		/* Catch pipe close on other end by checking if a read()
 		   call would not block by calling select(). */
 
Index: lenny/source/smbd/dnsregister.c
===================================================================
--- lenny.orig/source/smbd/dnsregister.c
+++ lenny/source/smbd/dnsregister.c
@@ -125,6 +125,9 @@
 	 */
 	if (dns_state->srv_ref != NULL) {
 		mdnsd_conn_fd = DNSServiceRefSockFD(dns_state->srv_ref);
+		if (mdnsd_conn_fd < 0 || mdnsd_conn_fd >= FD_SETSIZE) {
+			return;
+		}
 		FD_SET(mdnsd_conn_fd, listen_set);
 		return;
 	}
@@ -156,6 +159,9 @@
 	}
 
 	mdnsd_conn_fd = DNSServiceRefSockFD(dns_state->srv_ref);
+	if (mdnsd_conn_fd < 0 || mdnsd_conn_fd >= FD_SETSIZE) {
+		return;
+	}
 	FD_SET(mdnsd_conn_fd, listen_set);
 	*maxfd = MAX(*maxfd, mdnsd_conn_fd);
 	*timeout = timeval_zero();
Index: lenny/source/smbd/oplock.c
===================================================================
--- lenny.orig/source/smbd/oplock.c
+++ lenny/source/smbd/oplock.c
@@ -233,7 +233,10 @@
 int oplock_notify_fd(void)
 {
 	if (koplocks) {
-		return koplocks->notification_fd;
+		int fd = koplocks->notification_fd;
+		if (fd < 0 || fd >= FD_SETSIZE) {
+			return -1;
+		}
 	}
 
 	return -1;
Index: lenny/source/smbd/oplock_irix.c
===================================================================
--- lenny.orig/source/smbd/oplock_irix.c
+++ lenny/source/smbd/oplock_irix.c
@@ -284,6 +284,11 @@
 		return False;
 	}
 
+	if (pfd[0] < 0 || pfd[0] >= FD_SETSIZE) {
+		DEBUG(0,("setup_kernel_oplock_pipe: fd out of range.\n"));
+		return False;
+	}
+
 	oplock_pipe_read = pfd[0];
 	oplock_pipe_write = pfd[1];
 
Index: lenny/source/smbd/process.c
===================================================================
--- lenny.orig/source/smbd/process.c
+++ lenny/source/smbd/process.c
@@ -685,7 +685,7 @@
 
 static int select_on_fd(int fd, int maxfd, fd_set *fds)
 {
-	if (fd != -1) {
+	if (fd != -1 && fd < FD_SETSIZE) {
 		FD_SET(fd, fds);
 		maxfd = MAX(maxfd, fd);
 	}
Index: lenny/source/smbd/server.c
===================================================================
--- lenny.orig/source/smbd/server.c
+++ lenny/source/smbd/server.c
@@ -203,7 +203,13 @@
 	/* Started from inetd. fd 0 is the socket. */
 	/* We will abort gracefully when the client or remote system 
 	   goes away */
-	smbd_set_server_fd(dup(0));
+	int fd = dup(0);
+
+	if (fd < 0 || fd >= FD_SETSIZE) {
+		return false;
+	}
+
+	smbd_set_server_fd(fd);
 	
 	/* close our standard file descriptors */
 	close_low_fds(False); /* Don't close stderr */
@@ -422,7 +428,7 @@
 							num_sockets == 0 ? 0 : 2,
 							ifss,
 							true);
-				if(s == -1) {
+				if (s < 0 || s >= FD_SETSIZE) {
 					continue;
 				}
 
@@ -503,7 +509,7 @@
 						num_sockets == 0 ? 0 : 2,
 						&ss,
 						true);
-				if (s == -1) {
+				if (s < 0 || s >= FD_SETSIZE) {
 					continue;
 				}
 
@@ -677,6 +683,7 @@
 			struct sockaddr addr;
 			socklen_t in_addrlen = sizeof(addr);
 			pid_t child = 0;
+			int fd;
 
 			s = -1;
 			for(i = 0; i < num_sockets; i++) {
@@ -689,17 +696,22 @@
 				}
 			}
 
-			smbd_set_server_fd(accept(s,&addr,&in_addrlen));
-
-			if (smbd_server_fd() == -1 && errno == EINTR)
+			fd = accept(s,&addr,&in_addrlen);
+			if (fd == -1 && errno == EINTR)
 				continue;
-
-			if (smbd_server_fd() == -1) {
+			if (fd == -1) {
 				DEBUG(2,("open_sockets_smbd: accept: %s\n",
-					 strerror(errno)));
+					strerror(errno)));
+				continue;
+			}
+			if (fd < 0 || fd >= FD_SETSIZE) {
+				DEBUG(2,("open_sockets_smbd: bad fd %d\n",
+					fd ));
 				continue;
 			}
 
+			smbd_set_server_fd(fd);
+
 			/* Ensure child is set to blocking mode */
 			set_blocking(smbd_server_fd(),True);
 
Index: lenny/source/utils/smbfilter.c
===================================================================
--- lenny.orig/source/utils/smbfilter.c
+++ lenny/source/utils/smbfilter.c
@@ -162,8 +162,8 @@
 		int num;
 		
 		FD_ZERO(&fds);
-		if (s != -1) FD_SET(s, &fds);
-		if (c != -1) FD_SET(c, &fds);
+		if (s >= 0 && s < FD_SETSIZE) FD_SET(s, &fds);
+		if (c >= 0 && c < FD_SETSIZE) FD_SET(c, &fds);
 
 		num = sys_select_intr(MAX(s+1, c+1),&fds,NULL,NULL,NULL);
 		if (num <= 0) continue;
@@ -235,6 +235,10 @@
 		struct sockaddr_storage ss;
 		socklen_t in_addrlen = sizeof(ss);
 		
+		if (s < 0 || s >= FD_SETSIZE) {
+			break;
+		}
+
 		FD_ZERO(&fds);
 		FD_SET(s, &fds);
 
Index: lenny/source/winbindd/winbindd.c
===================================================================
--- lenny.orig/source/winbindd/winbindd.c
+++ lenny/source/winbindd/winbindd.c
@@ -845,7 +845,8 @@
 	listen_sock = open_winbindd_socket();
 	listen_priv_sock = open_winbindd_priv_socket();
 
-	if (listen_sock == -1 || listen_priv_sock == -1) {
+	if (listen_sock < 0 || listen_sock >= FD_SETSIZE ||
+			listen_priv_sock < 0 || listen_priv_sock >= FD_SETSIZE) {
 		perror("open_winbind_socket");
 		exit(1);
 	}
@@ -866,6 +867,9 @@
 
 	maxfd = MAX(listen_sock, listen_priv_sock);
 
+	/* We check the range for listen_sock and
+	   listen_priv_sock above. */
+
 	FD_ZERO(&r_fds);
 	FD_ZERO(&w_fds);
 	FD_SET(listen_sock, &r_fds);
@@ -897,6 +901,12 @@
 	}
 
 	for (ev = fd_events; ev; ev = ev->next) {
+		if (ev->fd < 0 || ev->fd >= FD_SETSIZE) {
+			/* Ignore here - event_add_to_select_args
+			   should make this impossible. */
+			continue;
+		}
+
 		if (ev->flags & EVENT_FD_READ) {
 			FD_SET(ev->fd, &r_fds);
 			maxfd = MAX(ev->fd, maxfd);
Index: lenny/source/winbindd/winbindd_dual.c
===================================================================
--- lenny.orig/source/winbindd/winbindd_dual.c
+++ lenny/source/winbindd/winbindd_dual.c
@@ -1009,6 +1009,12 @@
 		return False;
 	}
 
+	if (fdpair[0] < 0 || fdpair[0] >= FD_SETSIZE) {
+		DEBUG(0, ("fork_domain_child: bad fd range (%d)\n", fdpair[0]));
+		errno = EBADF;
+		return False;
+	}
+
 	ZERO_STRUCT(state);
 	state.pid = sys_getpid();
 
@@ -1173,6 +1179,7 @@
 		message_dispatch(winbind_messaging_context());
 
 		FD_ZERO(&read_fds);
+		/* We check state.sock against FD_SETSIZE above. */
 		FD_SET(state.sock, &read_fds);
 
 		ret = sys_select(state.sock + 1, &read_fds, NULL, NULL, tp);
